contract DateTime =
  /*
   Date and Time utilities for sophia contracts
  */
  record date_time = {year : int,
                      month : int,
                      day : int,
                      minute : int,
                      second : int,
                      weekday : int}

  record state = {origin_year : int, 
                  day_in_seconds : int,
                  year_in_seconds : int,
                  leap_year_in_seconds : int,
                  hour_in_seconds : int,
                  minute_in_seconds : int}
                  
                    
  public function init() : state =
    {origin_year = 1970, 
     day_in_seconds = 86400,
     year_in_seconds = 31536000,
     leap_year_in_seconds = 31622400,
     hour_in_seconds = 3600,
     minute_in_seconds = 60
     }

  private function init_date_time() : date_time =
    {year = state.origin_year,
     month = 0,
     day = 0,
     minute = 0,
     second = 0,
     weekday = 0
     }

  public function parse_timestamp(timestamp : int) : date_time =
    let date_time = init_date_time()
    // year
    let date_time = date_time{year = get_year()}
    let buf = leap_year_before(year) - leap_year_before(state.origin_year)
    
    let seconds_accounted_for = 0 + state.leap_year_in_seconds * buf
    let seconds_accounted_for = seconds_accounted_for + year_in_seconds*(year - state.origin_year - buf)
     
    // month
    let begin = 1
    let end = 12
    let date_time = date_time{month = for_month(begin, end, timestamp, seconds_accounted_for)}
    
    // day

  public function get_year(timestamp : int) : int =
    let year = state.origin_year + timestamp/state.year_in_seconds
    let num_leap_years = leap_year_before(year) - leap_year_before(state.origin_year)
    
    let seconds_accounted_for = 0 + state.leap_year_in_seconds*num_leap_years
    let seconds_accounted_for = seconds_accounted_for + state.year_in_seconds*(year-state.origin_year - num_leap_years)
   
    get_year'(seconds_accounted_for, timestamp, year)
    
  private function get_year'(seconds_accounted_for : int, timestamp : int, year : int) : int =
    let tmp_seconds_accounted_for = 0
    if(seconds_accounted_for > timestamp)
      if(is_leap_year(year-1))
        let tmp_seconds_accounted_for = seconds_accounted_for - state.leap_year_in_seconds
      else
        let tmp_seconds_accounted_for = seconds_accounted_for - state.year_in_seconds
      get_year'(tmp_seconds_accounted_for,  timestamp, year - 1)
    else
      year
    
  public function leap_year_before(year : int) : int =
    let year = year - 1
    year/4 - year/100 + year/400
    
  public function is_leap_year(year : int) : bool =
    if(rest(year, 4) != 0)
      false
    elif(rest(year, 100) != 0)
      true
    elif(rest(year, 400) != 0)
      false
    else
      true   
    
  private function for_month(begin, end, timestamp, seconds_accounted_for) =
    let seconds_in_month = state.day_in_seconds * get_days_in_month
    if((begin =< end) || (seconds_in_month + seconds_accounted_for > timestamp))
      begin
    else
      for_month(begin + 1, end, timestamp, seconds_accounted_for + seconds_in_month)
    
  public function get_days_in_month(month : int, year : int) : int =
    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || 
       month == 10 || month == 12) 31
    elif (month == 4 || month == 6 || month == 9 || month == 11) 30
    elif(is_leap_year(year)) 29
    else 28

  private function rest(year : int, div : int) : int =
    year - div*(year/div)
  